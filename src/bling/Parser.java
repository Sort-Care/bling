
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package bling;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\003\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\007\000" +
    "\002\006\007\000\002\006\011\000\002\007\005\000\002" +
    "\010\005\000\002\011\003\000\002\011\005\000\002\012" +
    "\003\000\002\012\005\000\002\013\003\000\002\013\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\014\003" +
    "\000\002\014\005\000\002\014\004\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\014\002\uffff\014\uffff\016\uffff\023\uffff\032" +
    "\uffff\001\002\000\014\002\001\014\013\016\007\023\016" +
    "\032\015\001\002\000\004\002\006\001\002\000\004\002" +
    "\000\001\002\000\014\014\uffff\016\uffff\017\uffff\023\uffff" +
    "\032\uffff\001\002\000\020\002\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\023\ufffd\032\ufffd\001\002\000\020\002\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\023\ufffb\032\ufffb\001" +
    "\002\000\020\002\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\023\ufffa\032\ufffa\001\002\000\004\012\062\001\002\000" +
    "\016\002\ufffe\014\ufffe\016\ufffe\017\ufffe\023\ufffe\032\ufffe" +
    "\001\002\000\012\012\030\022\024\035\027\037\022\001" +
    "\002\000\004\037\020\001\002\000\020\002\ufffc\014\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\023\ufffc\032\ufffc\001\002\000" +
    "\004\024\021\001\002\000\012\012\030\022\024\035\027" +
    "\037\022\001\002\000\036\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\011\uffe2\013\uffe2\020\uffe2\021\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\001\002\000\030\004" +
    "\ufff4\005\045\006\043\013\ufff4\021\055\024\046\025\054" +
    "\026\050\027\047\030\044\031\051\001\002\000\012\012" +
    "\030\022\024\035\027\037\022\001\002\000\036\004\ufff2" +
    "\005\ufff2\006\ufff2\007\040\011\037\013\ufff2\020\035\021" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\001\002\000\036\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011" +
    "\ufff0\013\ufff0\020\ufff0\021\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\001\002\000\036\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\011\uffdf\013\uffdf\020\uffdf\021\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\001" +
    "\002\000\012\012\030\022\024\035\027\037\022\001\002" +
    "\000\004\004\032\001\002\000\020\002\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\023\ufff9\032\ufff9\001\002\000\004" +
    "\013\034\001\002\000\036\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\011\uffe1\013\uffe1\020\uffe1\021\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\001\002\000\012\012" +
    "\uffee\022\uffee\035\uffee\037\uffee\001\002\000\012\012\030" +
    "\022\024\035\027\037\022\001\002\000\012\012\uffec\022" +
    "\uffec\035\uffec\037\uffec\001\002\000\012\012\uffed\022\uffed" +
    "\035\uffed\037\uffed\001\002\000\036\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\011\uffef\013\uffef\020\uffef\021\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\001\002\000" +
    "\036\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\013\uffe0" +
    "\020\uffe0\021\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\001\002\000\012\012\uffe9\022\uffe9\035\uffe9" +
    "\037\uffe9\001\002\000\012\012\uffe5\022\uffe5\035\uffe5\037" +
    "\uffe5\001\002\000\012\012\uffeb\022\uffeb\035\uffeb\037\uffeb" +
    "\001\002\000\012\012\uffe8\022\uffe8\035\uffe8\037\uffe8\001" +
    "\002\000\012\012\uffe3\022\uffe3\035\uffe3\037\uffe3\001\002" +
    "\000\012\012\uffe6\022\uffe6\035\uffe6\037\uffe6\001\002\000" +
    "\012\012\uffe7\022\uffe7\035\uffe7\037\uffe7\001\002\000\012" +
    "\012\030\022\024\035\027\037\022\001\002\000\012\012" +
    "\030\022\024\035\027\037\022\001\002\000\012\012\uffe4" +
    "\022\uffe4\035\uffe4\037\uffe4\001\002\000\012\012\uffea\022" +
    "\uffea\035\uffea\037\uffea\001\002\000\036\004\ufff1\005\ufff1" +
    "\006\ufff1\007\040\011\037\013\ufff1\020\035\021\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\001\002" +
    "\000\014\004\ufff3\005\045\006\043\013\ufff3\021\055\001" +
    "\002\000\004\004\061\001\002\000\020\002\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\023\ufff6\032\ufff6\001\002\000" +
    "\012\012\030\022\024\035\027\037\022\001\002\000\004" +
    "\013\064\001\002\000\012\014\013\016\007\023\016\032" +
    "\015\001\002\000\020\002\ufff8\014\ufff8\015\066\016\ufff8" +
    "\017\ufff8\023\ufff8\032\ufff8\001\002\000\012\014\013\016" +
    "\007\023\016\032\015\001\002\000\020\002\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\023\ufff7\032\ufff7\001\002\000" +
    "\014\014\013\016\007\017\071\023\016\032\015\001\002" +
    "\000\020\002\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\023" +
    "\ufff5\032\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\006\002\004\003\003\001\001\000\014\004" +
    "\013\005\007\006\016\007\010\010\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\057\012\022\013" +
    "\024\014\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\030\012\022\013\024\014" +
    "\025\001\001\000\002\001\001\000\006\016\052\017\051" +
    "\001\001\000\004\014\041\001\001\000\004\015\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\032" +
    "\012\022\013\024\014\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\056\013\024\014\025\001\001\000\006\013" +
    "\055\014\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\035\001\001\000\004\016\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\062\012\022" +
    "\013\024\014\025\001\001\000\002\001\001\000\014\004" +
    "\064\005\007\006\016\007\010\010\011\001\001\000\002" +
    "\001\001\000\014\004\066\005\007\006\016\007\010\010" +
    "\011\001\001\000\002\001\001\000\014\004\013\005\007" +
    "\006\016\007\010\010\011\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 s.init(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    scanner s;
    Parser(scanner s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statements 
            {
              Program RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= 
            {
              Statements RESULT =null;
		 RESULT = new Statements(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement 
            {
              Statements RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = ss).add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= letStmt 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= ifStmt 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= printStmt 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= block 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // letStmt ::= LET ID EQ expr SEMI 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LetStatement(id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letStmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ifStmt ::= IF LPAREN expr RPAREN statement 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement then = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(c, then, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ifStmt ::= IF LPAREN expr RPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement then = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement els = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(c, then, els); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // printStmt ::= PRINT expr SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PrintStmt(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // block ::= LBRACE statements RBRACE 
            {
              Statement RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Block(ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= simpleExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= simpleExpr relOp simpleExpr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					switch(op) {
						case sym.EQ:		RESULT = new EQ(l, r); break;
						case sym.GT:		RESULT = new GT(l, r); break;
						case sym.GE:		RESULT = new GE(l, r); break;
						case sym.LT:		RESULT = new LT(l, r); break;
						case sym.LE:		RESULT = new LE(l, r); break;
						default: throw new RuntimeException("Parse error");
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simpleExpr ::= term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simpleExpr ::= simpleExpr addOp term 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					switch(op) {
						case sym.PLUS: 	RESULT = new IntAdd(l, r); break;
						case sym.OR: 	RESULT = new BoolOr(l, r); break;
						case sym.MINUS:	RESULT = new IntMinus(l, r); break;
						default: throw new RuntimeException("Parse error");
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= factor 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= term multOp factor 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					switch(op) {
						case sym.AND:		RESULT = new BoolAnd(l, r); break;
						case sym.TIMES:		RESULT = new IntTimes(l, r); break;
						case sym.DIVIDE:	RESULT = new IntDivide(l, r); break;
						default: throw new RuntimeException("Parse error");
					} 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // multOp ::= AND 
            {
              Integer RESULT =null;
		 RESULT = sym.AND; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // multOp ::= TIMES 
            {
              Integer RESULT =null;
		 RESULT = sym.TIMES; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // multOp ::= DIVIDE 
            {
              Integer RESULT =null;
		 RESULT = sym.DIVIDE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // addOp ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = sym.PLUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addOp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // addOp ::= OR 
            {
              Integer RESULT =null;
		 RESULT = sym.OR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addOp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // addOp ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = sym.MINUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addOp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // relOp ::= EQ 
            {
              Integer RESULT =null;
		 RESULT = sym.EQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // relOp ::= NE 
            {
              Integer RESULT =null;
		 RESULT = sym.NE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // relOp ::= GT 
            {
              Integer RESULT =null;
		 RESULT = sym.GT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // relOp ::= GE 
            {
              Integer RESULT =null;
		 RESULT = sym.GE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // relOp ::= LT 
            {
              Integer RESULT =null;
		 RESULT = sym.LT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // relOp ::= LE 
            {
              Integer RESULT =null;
		 RESULT = sym.LE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= ID 
            {
              Expr RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id ident = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdExpr(ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // factor ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParenExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= NOT factor 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= NUMBER 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntValue(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
