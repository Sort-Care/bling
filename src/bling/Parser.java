
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package bling;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\003\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\007\000\002\006\007\000\002\006\011\000\002" +
    "\011\007\000\002\007\005\000\002\010\005\000\002\012" +
    "\003\000\002\012\005\000\002\013\003\000\002\013\005" +
    "\000\002\014\003\000\002\014\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\015\003\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\016\002\uffff\013\uffff\015\uffff\022\uffff\031" +
    "\uffff\034\uffff\001\002\000\016\002\001\013\015\015\011" +
    "\022\020\031\017\034\010\001\002\000\004\002\006\001" +
    "\002\000\004\002\000\001\002\000\022\002\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\022\ufffb\031\ufffb\034\ufffb\001" +
    "\002\000\004\011\102\001\002\000\016\013\uffff\015\uffff" +
    "\016\uffff\022\uffff\031\uffff\034\uffff\001\002\000\022\002" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\022\ufffd\031\ufffd" +
    "\034\ufffd\001\002\000\022\002\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\022\ufffa\031\ufffa\034\ufffa\001\002\000\022" +
    "\002\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\022\ufff9\031" +
    "\ufff9\034\ufff9\001\002\000\004\011\072\001\002\000\020" +
    "\002\ufffe\013\ufffe\015\ufffe\016\ufffe\022\ufffe\031\ufffe\034" +
    "\ufffe\001\002\000\022\006\024\011\037\021\036\032\027" +
    "\033\032\036\025\037\033\040\031\001\002\000\004\037" +
    "\022\001\002\000\022\002\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\022\ufffc\031\ufffc\034\ufffc\001\002\000\004\023" +
    "\023\001\002\000\022\006\024\011\037\021\036\032\027" +
    "\033\032\036\025\037\033\040\031\001\002\000\022\006" +
    "\024\011\037\021\036\032\027\033\032\036\025\037\033" +
    "\040\031\001\002\000\040\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\012\uffdb\017\uffdb\020\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\035\uffdb\001\002\000" +
    "\040\004\ufff0\005\ufff0\006\ufff0\007\064\010\063\012\ufff0" +
    "\017\061\020\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\035\060\001\002\000\040\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\012\uffda\017\uffda\020\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\035\uffda" +
    "\001\002\000\030\004\ufff2\005\046\006\044\012\ufff2\020" +
    "\056\023\047\024\055\025\051\026\050\027\045\030\052" +
    "\001\002\000\040\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\012\uffd8\017\uffd8\020\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\035\uffd8\001\002\000\040\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9\017\uffd9" +
    "\020\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\035\uffd9\001\002\000\040\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\012\uffdf\017\uffdf\020\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\035\uffdf\001\002" +
    "\000\040\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\012" +
    "\uffee\017\uffee\020\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\035\uffee\001\002\000\004\004\043\001" +
    "\002\000\022\006\024\011\037\021\036\032\027\033\032" +
    "\036\025\037\033\040\031\001\002\000\022\006\024\011" +
    "\037\021\036\032\027\033\032\036\025\037\033\040\031" +
    "\001\002\000\004\012\041\001\002\000\040\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\012\uffde\017\uffde\020\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\035" +
    "\uffde\001\002\000\040\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\012\uffdd\017\uffdd\020\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\035\uffdd\001\002\000\022" +
    "\002\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\022\ufff8\031" +
    "\ufff8\034\ufff8\001\002\000\022\006\uffe6\011\uffe6\021\uffe6" +
    "\032\uffe6\033\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002\000" +
    "\022\006\uffe2\011\uffe2\021\uffe2\032\uffe2\033\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\001\002\000\022\006\uffe8\011\uffe8\021" +
    "\uffe8\032\uffe8\033\uffe8\036\uffe8\037\uffe8\040\uffe8\001\002" +
    "\000\022\006\uffe5\011\uffe5\021\uffe5\032\uffe5\033\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\001\002\000\022\006\uffe0\011\uffe0" +
    "\021\uffe0\032\uffe0\033\uffe0\036\uffe0\037\uffe0\040\uffe0\001" +
    "\002\000\022\006\uffe3\011\uffe3\021\uffe3\032\uffe3\033\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\001\002\000\022\006\uffe4\011" +
    "\uffe4\021\uffe4\032\uffe4\033\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\001\002\000\022\006\024\011\037\021\036\032\027\033" +
    "\032\036\025\037\033\040\031\001\002\000\022\006\024" +
    "\011\037\021\036\032\027\033\032\036\025\037\033\040" +
    "\031\001\002\000\022\006\uffe1\011\uffe1\021\uffe1\032\uffe1" +
    "\033\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002\000\022\006" +
    "\uffe7\011\uffe7\021\uffe7\032\uffe7\033\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\001\002\000\040\004\uffef\005\uffef\006\uffef\007" +
    "\064\010\063\012\uffef\017\061\020\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\035\060\001\002\000" +
    "\022\006\uffe9\011\uffe9\021\uffe9\032\uffe9\033\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\001\002\000\022\006\uffec\011\uffec\021" +
    "\uffec\032\uffec\033\uffec\036\uffec\037\uffec\040\uffec\001\002" +
    "\000\022\006\024\011\037\021\036\032\027\033\032\036" +
    "\025\037\033\040\031\001\002\000\022\006\uffea\011\uffea" +
    "\021\uffea\032\uffea\033\uffea\036\uffea\037\uffea\040\uffea\001" +
    "\002\000\022\006\uffeb\011\uffeb\021\uffeb\032\uffeb\033\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\001\002\000\040\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\012\uffed\017\uffed\020\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\035" +
    "\uffed\001\002\000\014\004\ufff1\005\046\006\044\012\ufff1" +
    "\020\056\001\002\000\040\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\012\uffdc\017\uffdc\020\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\035\uffdc\001\002\000" +
    "\004\004\071\001\002\000\022\002\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\022\ufff4\031\ufff4\034\ufff4\001\002\000" +
    "\022\006\024\011\037\021\036\032\027\033\032\036\025" +
    "\037\033\040\031\001\002\000\004\012\074\001\002\000" +
    "\014\013\015\015\011\022\020\031\017\034\010\001\002" +
    "\000\022\002\ufff7\013\ufff7\014\076\015\ufff7\016\ufff7\022" +
    "\ufff7\031\ufff7\034\ufff7\001\002\000\014\013\015\015\011" +
    "\022\020\031\017\034\010\001\002\000\022\002\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\022\ufff6\031\ufff6\034\ufff6" +
    "\001\002\000\016\013\015\015\011\016\101\022\020\031" +
    "\017\034\010\001\002\000\022\002\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\022\ufff3\031\ufff3\034\ufff3\001\002\000" +
    "\022\006\024\011\037\021\036\032\027\033\032\036\025" +
    "\037\033\040\031\001\002\000\004\012\104\001\002\000" +
    "\014\013\015\015\011\022\020\031\017\034\010\001\002" +
    "\000\022\002\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\022" +
    "\ufff5\031\ufff5\034\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\002\004\003\003\001\001\000\016\004" +
    "\015\005\011\006\020\007\012\010\013\011\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\067\013\027\014\025\015\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\034\013\027\014\025\015\033\001\001" +
    "\000\004\015\066\001\001\000\002\001\001\000\004\016" +
    "\061\001\001\000\002\001\001\000\006\017\053\020\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\041" +
    "\001\001\000\012\012\037\013\027\014\025\015\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\065\014\025\015" +
    "\033\001\001\000\006\014\056\015\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\072\013\027\014\025\015" +
    "\033\001\001\000\002\001\001\000\016\004\074\005\011" +
    "\006\020\007\012\010\013\011\006\001\001\000\002\001" +
    "\001\000\016\004\076\005\011\006\020\007\012\010\013" +
    "\011\006\001\001\000\002\001\001\000\016\004\015\005" +
    "\011\006\020\007\012\010\013\011\006\001\001\000\002" +
    "\001\001\000\012\012\102\013\027\014\025\015\033\001" +
    "\001\000\002\001\001\000\016\004\104\005\011\006\020" +
    "\007\012\010\013\011\006\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 s.init(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    scanner s;
    Parser(scanner s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statements 
            {
              Program RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= 
            {
              Statements RESULT =null;
		 RESULT = new Statements(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement 
            {
              Statements RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = ss).add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= letStmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= ifStmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= whileLoop 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= printStmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= block 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // letStmt ::= LET ID EQ expr SEMI 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LetStatement(id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letStmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ifStmt ::= IF LPAREN expr RPAREN statement 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement then = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(c, then, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ifStmt ::= IF LPAREN expr RPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement then = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement els = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(c, then, els); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // whileLoop ::= WHILE LPAREN expr RPAREN statement 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileLoop(c, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileLoop",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // printStmt ::= PRINT expr SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PrintStmt(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // block ::= LBRACE statements RBRACE 
            {
              Statement RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Block(ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= simpleExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= simpleExpr relOp simpleExpr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					switch(op) {
						case sym.EQ:		RESULT = new EQ(l, r); break;
						case sym.GT:		RESULT = new GT(l, r); break;
						case sym.GE:		RESULT = new GE(l, r); break;
						case sym.LT:		RESULT = new LT(l, r); break;
						case sym.LE:		RESULT = new LE(l, r); break;
						default: throw new RuntimeException("Parse error");
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simpleExpr ::= term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simpleExpr ::= simpleExpr addOp term 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					switch(op) {
						case sym.PLUS: 	RESULT = new Add(l, r); break;
						case sym.OR: 	RESULT = new BoolOr(l, r); break;
						case sym.MINUS:	RESULT = new IntMinus(l, r); break;
						default: throw new RuntimeException("Parse error");
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= factor 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term ::= term multOp factor 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					switch(op) {
						case sym.AND:		RESULT = new BoolAnd(l, r); break;
						case sym.TIMES:		RESULT = new IntTimes(l, r); break;
						case sym.DIVIDE:	RESULT = new IntDivide(l, r); break;
						case sym.MOD:		RESULT = new IntMod(l, r); break;
						default: throw new RuntimeException("Parse error");
					} 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // multOp ::= AND 
            {
              Integer RESULT =null;
		 RESULT = sym.AND; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // multOp ::= TIMES 
            {
              Integer RESULT =null;
		 RESULT = sym.TIMES; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // multOp ::= DIVIDE 
            {
              Integer RESULT =null;
		 RESULT = sym.DIVIDE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // multOp ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = sym.MOD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // addOp ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = sym.PLUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addOp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // addOp ::= OR 
            {
              Integer RESULT =null;
		 RESULT = sym.OR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addOp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // addOp ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = sym.MINUS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addOp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // relOp ::= EQ 
            {
              Integer RESULT =null;
		 RESULT = sym.EQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // relOp ::= NE 
            {
              Integer RESULT =null;
		 RESULT = sym.NE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // relOp ::= GT 
            {
              Integer RESULT =null;
		 RESULT = sym.GT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // relOp ::= GE 
            {
              Integer RESULT =null;
		 RESULT = sym.GE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // relOp ::= LT 
            {
              Integer RESULT =null;
		 RESULT = sym.LT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // relOp ::= LE 
            {
              Integer RESULT =null;
		 RESULT = sym.LE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= ID 
            {
              Expr RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id ident = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdExpr(ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParenExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= NOT factor 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= MINUS factor 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Neg(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= NUMBER 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Long n = (Long)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntValue(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = BoolValue.TRUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = BoolValue.FALSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringValue(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
