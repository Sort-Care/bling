/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    scanner s;
    Parser(scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal          SEMI, PLUS, MINUS, TIMES,  DIVIDE, LPAREN, RPAREN, IF, ELSE, 
				  LBRACE, RBRACE, AND, OR, NOT, LET, EQ, LT, GT, LE, GE, NE, PRINT,
				  TRUE, FALSE, WHILE, MOD;
terminal Long     NUMBER;        // our scanner provides numbers as integers
terminal Id       ID;

/* Non terminals */
non terminal Program    program;
non terminal Statements statements;
non terminal Statement  statement;
non terminal Statement  letStmt, ifStmt, printStmt, block, whileLoop;
non terminal Expr       expr, simpleExpr, term, factor;
non terminal Integer    multOp, addOp, relOp;    

/* Precedences */
precedence left PLUS, MINUS, AND, OR;
precedence left TIMES, NOT;

/* The grammar rules */
program ::= statements:ss
		{: RESULT = new Program(ss); :}
		;
statements ::= 
				{: RESULT = new Statements(); :}
            |  statements:ss statement:s
				{: (RESULT = ss).add(s); :}
            ;
statement ::= letStmt:s
                {: RESULT = s; :}
			| ifStmt:s
                {: RESULT = s; :}
			| whileLoop:s
                {: RESULT = s; :}
			| printStmt:s
                {: RESULT = s; :}
			| block:s
                {: RESULT = s; :}
			;
letStmt ::= LET ID:id EQ expr:e SEMI
		{: RESULT = new LetStatement(id, e); :}
		;
ifStmt		::=	IF LPAREN expr:c RPAREN statement:then
				{: RESULT = new IfStmt(c, then, null); :}
		 	|	IF LPAREN expr:c RPAREN statement:then ELSE statement:els
				{: RESULT = new IfStmt(c, then, els); :}
			;
whileLoop	::=	WHILE LPAREN expr:c RPAREN statement:body
				{: RESULT = new WhileLoop(c, body); :}
            ;
printStmt	::= PRINT expr:e SEMI
				{: RESULT = new PrintStmt(e); :}
			;
block		::= LBRACE statements:ss RBRACE
				{: RESULT = new Block(ss); :}
			;
expr		::=	simpleExpr:e 
				{: RESULT = e; :}
			| simpleExpr:l relOp:op simpleExpr:r
				{: 
					switch(op) {
						case sym.EQ:		RESULT = new EQ(l, r); break;
						case sym.GT:		RESULT = new GT(l, r); break;
						case sym.GE:		RESULT = new GE(l, r); break;
						case sym.LT:		RESULT = new LT(l, r); break;
						case sym.LE:		RESULT = new LE(l, r); break;
						default: throw new RuntimeException("Parse error");
					}
				:}
            ;
simpleExpr	::= term:e
				{: RESULT = e; :}
			| simpleExpr:l addOp:op term:r
				{: 
					switch(op) {
						case sym.PLUS: 	RESULT = new IntAdd(l, r); break;
						case sym.OR: 	RESULT = new BoolOr(l, r); break;
						case sym.MINUS:	RESULT = new IntMinus(l, r); break;
						default: throw new RuntimeException("Parse error");
					}
				:}
			;

term 		::= factor:e 
				{: RESULT = e; :}
			| term:l multOp:op factor:r
				{: 
					switch(op) {
						case sym.AND:		RESULT = new BoolAnd(l, r); break;
						case sym.TIMES:		RESULT = new IntTimes(l, r); break;
						case sym.DIVIDE:	RESULT = new IntDivide(l, r); break;
						case sym.MOD:		RESULT = new IntMod(l, r); break;
						default: throw new RuntimeException("Parse error");
					} 
				:}
			;

multOp		::= AND			{: RESULT = sym.AND; :}
			|   TIMES		{: RESULT = sym.TIMES; :}
			|   DIVIDE		{: RESULT = sym.DIVIDE; :}
			|   MOD			{: RESULT = sym.MOD; :}
			;

addOp		::= PLUS		{: RESULT = sym.PLUS; :}
			|   OR			{: RESULT = sym.OR; :}
			|   MINUS		{: RESULT = sym.MINUS; :}
			;


relOp 		::= EQ			{: RESULT = sym.EQ; :}
			|	NE			{: RESULT = sym.NE; :}
			|	GT			{: RESULT = sym.GT; :}
			|	GE			{: RESULT = sym.GE; :}
			|	LT			{: RESULT = sym.LT; :}
			|	LE			{: RESULT = sym.LE; :}
			;

factor 		::= ID:ident
				{: RESULT = new IdExpr(ident); :}
			| LPAREN expr:e RPAREN
				{: RESULT = new ParenExpr(e); :}
			| NOT factor:e
				{: RESULT = new Not(e); :}
			| MINUS factor:e
				{: RESULT = new Neg(e); :}
			| NUMBER:n
				{: RESULT = new IntValue(n); :}
			| TRUE
				{: RESULT = BoolValue.TRUE; :}
			| FALSE
				{: RESULT = BoolValue.FALSE; :}
            ;
